using System.IO; // for Path.Combine
using Sharpmake; // contains the entire Sharpmake object library.

// Represents the project that will be generated by Sharpmake and that contains
// the sample C++ code.
[Generate]
class BaseProject : Project
{
    public BaseProject()
    {
        Name = "Base";
        SourceRootPath = @"[project.SharpmakeCsPath]\\..\\BaseCode";

        AddTargets(new Target(
            Platform.win64,
            DevEnv.vs2019,
            Optimization.Debug | Optimization.Release));
    }
    [Configure]
    public void ConfigureAll(Project.Configuration conf, Target target)
    {
        conf.ProjectPath = Path.Combine("[project.SharpmakeCsPath]\\..", "");
    }
}

[Generate]
class BaseSolution : Solution
{
    public BaseSolution()
    {
        Name = "Base";
        AddTargets(new Target(
            Platform.win64,
            DevEnv.vs2019,
            Optimization.Debug | Optimization.Release));
    }
	
    [Configure]
    public void ConfigureAll(Solution.Configuration conf, Target target)
    {
        conf.SolutionPath = @"[solution.SharpmakeCsPath]\\..";
        conf.AddProject<BaseProject>(target);
    }

    [Main]
    public static void SharpmakeMain(Arguments sharpmakeArgs)
    {
        sharpmakeArgs.Generate<BaseSolution>();
    }

}
